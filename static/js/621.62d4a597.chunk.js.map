{"version":3,"file":"static/js/621.62d4a597.chunk.js","mappings":"2KAKaA,E,QAAUC,GAAAA,OAAa,CAClCC,QAJe,gCAKfC,OAAQ,CAAEC,QAJI,qC,sECDHC,E,QAAOC,EAAAA,GAAH,wR,mBCGJC,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3B,OACE,SAACH,EAAD,WACE,SAACI,EAAA,EAAD,CAAWD,MAAOA,KAGvB,C,0GCTYE,EAAOJ,EAAAA,EAAAA,GAAH,iPAWJK,EAAQL,EAAAA,EAAAA,IAAH,mNAWLM,EAAQN,EAAAA,EAAAA,IAAH,uIAQLO,EAAYP,EAAAA,EAAAA,EAAH,kH,SC5BTG,EAAY,SAAC,GAAe,IAAbD,EAAY,EAAZA,MACpBM,GAAWC,EAAAA,EAAAA,MAEjB,OACE,8BACGP,EAAMQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACT,SAACT,EAAD,WACE,UAAC,KAAD,CAAMU,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,WACE,SAACH,EAAD,CACEY,IAAG,yCAAoCJ,GACvCK,IAAI,GACJC,MAAO,WAET,SAACb,EAAD,WACE,SAACC,EAAD,UAAYK,UARPD,EADF,KAgBhB,C,2JCvBYS,EAAOpB,EAAAA,EAAAA,KAAH,yFAKJqB,EAAQrB,EAAAA,EAAAA,MAAH,6FAOLsB,EAAYtB,EAAAA,EAAAA,OAAH,kT,SCXTuB,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAa1B,OACE,SAACJ,EAAD,CAAMI,SAba,SAAAC,GACnBA,EAAEC,iBAEF,IACMC,EADOF,EAAEG,cACIC,SAASC,OAAOC,MAErB,KAAVJ,EAIJH,EAASG,GAHPK,MAAM,sBAIT,EAEC,UACE,4BACE,SAACX,EAAD,CAAOY,KAAK,OAAOC,YAAY,sBAAsBC,KAAK,YAC1D,SAACb,EAAD,CAAWW,KAAK,SAAhB,wBAIP,E,oBCjBc,SAASG,IAAU,IAAD,EAC/B,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAW,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAEjDC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,6GAE2BnD,EAAAA,EAAAA,IAAY,gBAAiB,CAClDG,OAAQ,CAAE8B,MAAOgB,KAHvB,OAKyC,KAH/BG,EAFV,QAKiBC,KAAKC,QAAQC,QACxBjB,MAAM,iBAERO,EAAeO,EAASC,KAAKC,SARjC,gDAUIhB,MAAM,iCAVV,0DAFc,sBACTW,GADS,mCAedO,EACD,GAAE,CAACP,IAKJ,OACE,iCACE,SAACpB,EAAD,CAAWC,SALE,SAAAG,GACfe,EAAiC,KAAjBf,EAAMwB,OAAgB,CAAExB,MAAAA,GAAU,CAAC,EACpD,KAIG,SAAC,IAAD,CAAYzB,MAAOoC,MAGxB,C","sources":["Services/tmdbAPI.js","components/Grid/Grid.styled.js","components/Grid/Grid.jsx","components/GridItems/GridItems.styled.js","components/GridItems/GridItems.jsx","components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '46354c0f6d8d48bd63fbf74687131c27';\n\nexport const thmdAPI = axios.create({\n  baseURL: BASE_URL,\n  params: { api_key: API_KEY },\n});\n","import styled from '@emotion/styled';\n\nexport const Grid = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Grid } from './Grid.styled';\nimport { GridItems } from 'components/GridItems/GridItems';\n\nexport const StyledGrid = ({ items }) => {\n  return (\n    <Grid>\n      <GridItems items={items} />\n    </Grid>\n  );\n};\n\nStyledGrid.propTypes = {\n  items: PropTypes.array,\n};\n","import styled from '@emotion/styled';\n\nexport const Card = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n\n  > a {\n    text-decoration: none;\n    color: black;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 260px;\n  object-fit: contain;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    transform: scale(0.98);\n    cursor: pointer;\n  }\n`;\n\nexport const Thumb = styled.div`\n  padding: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`;\n\nexport const MovieName = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n  text-shadow: 1px 4px 8px rgba(0, 0, 0, 0.75);\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Card, Image, MovieName, Thumb } from './GridItems.styled';\n\nexport const GridItems = ({ items }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {items.map(({ id, title, poster_path }) => (\n        <Card key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <Image\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt=\"\"\n              width={'200px'}\n            />\n            <Thumb>\n              <MovieName>{title}</MovieName>\n            </Thumb>\n          </Link>\n        </Card>\n      ))}\n    </>\n  );\n};\n\nGridItems.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  justify-content: center;\n  margin: 15px 0;\n`;\nexport const Field = styled.input`\n  margin: 0;\n  margin-left: 0;\n  padding: 10px;\n  outline: none;\n`;\n\nexport const SubmitBtn = styled.button`\n  transition: all 250ms linear;\n  padding: 11px 5px;\n  background-color: white;\n  border: 0.3px solid black;\n  border-left: transparent;\n  outline: none;\n\n  cursor: pointer;\n  :hover {\n    background-color: orangered;\n    color: white;\n    border-color: orangered;\n  }\n`;\n","import { Form, Field, SubmitBtn } from './SearchBar.styled';\nimport PropTypes from 'prop-types';\n\nexport const SearchBar = ({ onSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const query = form.elements.search.value;\n\n    if (query === '') {\n      alert('enter movie name...');\n      return;\n    }\n    onSubmit(query);\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div>\n        <Field type=\"text\" placeholder=\"Enter movie name...\" name=\"search\" />\n        <SubmitBtn type=\"submit\">search</SubmitBtn>\n      </div>\n    </Form>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { thmdAPI } from 'Services/tmdbAPI';\nimport { StyledGrid } from 'components/Grid/Grid';\n\nexport default function Movies() {\n  const [foundMovies, setFoundMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    async function getMovieByKeyword() {\n      try {\n        const response = await thmdAPI.get('/search/movie', {\n          params: { query: searchQuery },\n        });\n        if (response.data.results.length === 0) {\n          alert('Nothing found');\n        }\n        setFoundMovies(response.data.results);\n      } catch (error) {\n        alert('somthing went wrong!Try again');\n      }\n    }\n    getMovieByKeyword();\n  }, [searchQuery]);\n\n  const getQuery = query => {\n    setSearchParams(query.trim() !== '' ? { query } : {});\n  };\n  return (\n    <>\n      <SearchBar onSubmit={getQuery} />\n      <StyledGrid items={foundMovies} />\n    </>\n  );\n}\n"],"names":["thmdAPI","axios","baseURL","params","api_key","Grid","styled","StyledGrid","items","GridItems","Card","Image","Thumb","MovieName","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","width","Form","Field","SubmitBtn","SearchBar","onSubmit","e","preventDefault","query","currentTarget","elements","search","value","alert","type","placeholder","name","Movies","useState","foundMovies","setFoundMovies","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","response","data","results","length","getMovieByKeyword","trim"],"sourceRoot":""}